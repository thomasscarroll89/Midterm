sqrt((sum((log(x + 1) - log(outcomes + 1))^2))/n)
}
rmsle.calculation <- function(x){
sqrt((sum((log(x + 1) - log(outcomes + 1))^2))/n)
}
mape.calculation <- function(x){
sum(x)/n
}
model.statistics <- function(outcomes, predictions, naive.forecast){
n <- nrow(predictions)
k <- ncol(predictions)
#calculate absolute error, e (i.e. the residuals)
function1 <- function(x){ #create a function to calculate RMSE for a single vector
abs(outcomes.test - x)
}
abs.error <- apply(predictions, 2, function1) #apply the function to predictions matrix by column
#abs.error is an n-by-k matrix containing absolute error; each column corresponds to a different model
#calculate absolute percentage error, a
function2 <- function(i){
(abs.error[,i]/abs(outcomes))*100
}
abs.percent.error <- sapply(1:k, function2)
#abs.percent.error is an n-by-k matrix containing absolute percentage error; each column corresponds to a different model
#calculate vector b, the difference between naive estimates and outcome
b <- abs(outcomes - naive.forecast)
#RMSE FORMULA
rmse.calculation <- function(x){
sqrt(sum(na.omit(x)^2)/n)
}
rmse <- apply(abs.error, 2, rmse.calculation)
#MAD FORMULA
mad <- apply(abs.error, 2, median)
#RMSLE FORMULA
rmsle.calculation <- function(x){
sqrt((sum((log(x + 1) - log(outcomes + 1))^2))/n)
}
rmsle <- apply(predictions, 2, rmsle.calculation)
#MAPE FORMULA
mape.calculation <- function(x){
sum(x)/n
}
mape <- apply(abs.percent.error, 2, mape.calculation)
#MEAPE FORMULA
meape <- apply(abs.percent.error, 2, median)
#MRAE FORMULA
mrae.calculation <- function(x){
median(x/b)
}
mrae <- apply(abs.error, 2, mrae.calculation)
#Creating the output
output <- cbind(rmse, mad, rmsle, mape, meape, mrae)
return(output)
}
rm(abs.error, outcomes, n, k)
naive.temp <- testing$voteshare
length(testing$voteshare)
naive.temp <- testing$voteshare[-3344]
naive <- c(NA, naive.temp)
model.statistics(outcomes=testing$voteshare, predictions=cbind(prediction1, prediction2, prediction3), naive.forecast=naive)
mad.calculation <- function(x){
median(na.omit(x))
}
mape.calculation <- function(x){
sum(na.omit(x))/n
}
meape.calculation <- function(x){
median(na.omit(x))
}
model.statistics <- function(outcomes, predictions, naive.forecast){
n <- nrow(predictions)
k <- ncol(predictions)
#calculate absolute error, e (i.e. the residuals)
function1 <- function(x){ #create a function to calculate RMSE for a single vector
abs(outcomes.test - x)
}
abs.error <- apply(predictions, 2, function1) #apply the function to predictions matrix by column
#abs.error is an n-by-k matrix containing absolute error; each column corresponds to a different model
#calculate absolute percentage error, a
function2 <- function(i){
(abs.error[,i]/abs(outcomes))*100
}
abs.percent.error <- sapply(1:k, function2)
#abs.percent.error is an n-by-k matrix containing absolute percentage error; each column corresponds to a different model
#calculate vector b, the difference between naive estimates and outcome
b <- abs(outcomes - naive.forecast)
#RMSE FORMULA
rmse.calculation <- function(x){
sqrt(sum(na.omit(x)^2)/n)
}
rmse <- apply(abs.error, 2, rmse.calculation)
#MAD FORMULA
mad.calculation <- function(x){
median(na.omit(x))
}
mad <- apply(abs.error, 2, mad.calculation)
#RMSLE FORMULA
rmsle.calculation <- function(x){
sqrt((sum((log(x + 1) - log(outcomes + 1))^2))/n)
}
rmsle <- apply(predictions, 2, rmsle.calculation)
#MAPE FORMULA
mape.calculation <- function(x){
sum(na.omit(x))/n
}
mape <- apply(abs.percent.error, 2, mape.calculation)
#MEAPE FORMULA
meape.calculation <- function(x){
median(na.omit(x))
}
meape <- apply(abs.percent.error, 2, meape.calculation)
#MRAE FORMULA
mrae.calculation <- function(x){
median(x/b)
}
mrae <- apply(abs.error, 2, mrae.calculation)
#Creating the output
output <- cbind(rmse, mad, rmsle, mape, meape, mrae)
return(output)
}
model.statistics(outcomes=testing$voteshare, predictions=cbind(prediction1, prediction2, prediction3), naive.forecast=naive)
rmsle.calculation <- function(x){
temp <- cbind(outcomes, x)
temp <- na.omit(temp)
sqrt((sum((log(temp[,2] + 1) - log(temp[,1] + 1))^2))/n)
}
mrae.calculation <- function(x){
temp <- cbind(b, x)
temp <- na.omit(temp)
median(temp[,2]/temp[,1])
}
model.statistics <- function(outcomes, predictions, naive.forecast){
n <- nrow(predictions)
k <- ncol(predictions)
#calculate absolute error, e (i.e. the residuals)
function1 <- function(x){ #create a function to calculate RMSE for a single vector
abs(outcomes.test - x)
}
abs.error <- apply(predictions, 2, function1) #apply the function to predictions matrix by column
#abs.error is an n-by-k matrix containing absolute error; each column corresponds to a different model
#calculate absolute percentage error, a
function2 <- function(i){
(abs.error[,i]/abs(outcomes))*100
}
abs.percent.error <- sapply(1:k, function2)
#abs.percent.error is an n-by-k matrix containing absolute percentage error; each column corresponds to a different model
#calculate vector b, the difference between naive estimates and outcome
b <- abs(outcomes - naive.forecast)
#RMSE FORMULA
rmse.calculation <- function(x){
sqrt(sum(na.omit(x)^2)/n)
}
rmse <- apply(abs.error, 2, rmse.calculation)
#MAD FORMULA
mad.calculation <- function(x){
median(na.omit(x))
}
mad <- apply(abs.error, 2, mad.calculation)
#RMSLE FORMULA
rmsle.calculation <- function(x){
temp <- cbind(outcomes, x)
temp <- na.omit(temp)
sqrt((sum((log(temp[,2] + 1) - log(temp[,1] + 1))^2))/n)
}
rmsle <- apply(predictions, 2, rmsle.calculation)
#MAPE FORMULA
mape.calculation <- function(x){
sum(na.omit(x))/n
}
mape <- apply(abs.percent.error, 2, mape.calculation)
#MEAPE FORMULA
meape.calculation <- function(x){
median(na.omit(x))
}
meape <- apply(abs.percent.error, 2, meape.calculation)
#MRAE FORMULA
mrae.calculation <- function(x){
temp <- cbind(b, x)
temp <- na.omit(temp)
median(temp[,2]/temp[,1])
}
mrae <- apply(abs.error, 2, mrae.calculation)
#Creating the output
output <- cbind(rmse, mad, rmsle, mape, meape, mrae)
return(output)
}
model.statistics <- function(outcomes, predictions, naive.forecast){
n <- nrow(predictions)
k <- ncol(predictions)
#calculate absolute error, e (i.e. the residuals)
function1 <- function(x){ #create a function to calculate RMSE for a single vector
abs(outcomes.test - x)
}
abs.error <- apply(predictions, 2, function1) #apply the function to predictions matrix by column
#abs.error is an n-by-k matrix containing absolute error; each column corresponds to a different model
#calculate absolute percentage error, a
function2 <- function(i){
(abs.error[,i]/abs(outcomes))*100
}
abs.percent.error <- sapply(1:k, function2)
#abs.percent.error is an n-by-k matrix containing absolute percentage error; each column corresponds to a different model
#calculate vector b, the difference between naive estimates and outcome
b <- abs(outcomes - naive.forecast)
#RMSE FORMULA
rmse.calculation <- function(x){
sqrt(sum(na.omit(x)^2)/n)
}
rmse <- apply(abs.error, 2, rmse.calculation)
#MAD FORMULA
mad.calculation <- function(x){
median(na.omit(x))
}
mad <- apply(abs.error, 2, mad.calculation)
#RMSLE FORMULA
rmsle.calculation <- function(x){
temp <- cbind(outcomes, x)
temp <- na.omit(temp)
sqrt((sum((log(temp[,2] + 1) - log(temp[,1] + 1))^2))/n)
}
rmsle <- apply(predictions, 2, rmsle.calculation)
#MAPE FORMULA
mape.calculation <- function(x){
sum(na.omit(x))/n
}
mape <- apply(abs.percent.error, 2, mape.calculation)
#MEAPE FORMULA
meape.calculation <- function(x){
median(na.omit(x))
}
meape <- apply(abs.percent.error, 2, meape.calculation)
#MRAE FORMULA
mrae.calculation <- function(x){
temp <- cbind(b, x)
temp <- na.omit(temp)
median(temp[,2]/temp[,1])
}
mrae <- apply(abs.error, 2, mrae.calculation)
#Creating the output
output <- cbind(rmse, mad, rmsle, mape, meape, mrae)
return(output)
}
model.statistics(outcomes=testing$voteshare, predictions=cbind(prediction1, prediction2, prediction3), naive.forecast=naive)
naive.forecast=NULL
naive.forecast
class(naive.forecast)
naive.forecast==NULL
naive.forecast!=NULL
is.null(naive.forecast)
output <- matrix(NA)
output
output <- cbind(1, 2)
output
output <- matrix(NA)
output <- cbind(output, 1)
output
output <- matrix(NA)
paste(rep("Model", 6), 1:6)
paste(rep("Model", k), 1:k)
k <- 3
paste(rep("Model", k), 1:k)
output <- matrix(paste(rep("Model", k), 1:k))
output
rm(k)
k
model.statistics2 <- function(outcomes, predictions, naive.forecast=NULL, RMSE=TRUE, MAD=TRUE,
RMSLE=TRUE, MAPE=TRUE, MEAPE=TRUE, MRAE=TRUE){
n <- nrow(predictions)
k <- ncol(predictions)
#calculate absolute error, e (i.e. the residuals)
function1 <- function(x){ #create a function to calculate RMSE for a single vector
abs(outcomes.test - x)
}
abs.error <- apply(predictions, 2, function1) #apply the function to predictions matrix by column
#abs.error is an n-by-k matrix containing absolute error; each column corresponds to a different model
#calculate absolute percentage error, a
function2 <- function(i){
(abs.error[,i]/abs(outcomes))*100
}
abs.percent.error <- sapply(1:k, function2)
#abs.percent.error is an n-by-k matrix containing absolute percentage error; each column corresponds to a different model
#calculate vector b, the difference between naive estimates and outcome
if(is.null(naive.forecast)==FALSE){ #tests to make sure that naive.forecast was specified in the
#arguments; otherwise the next line of code wouldn't run
b <- abs(outcomes - naive.forecast)
}
#RMSE FORMULA
rmse.calculation <- function(x){
sqrt(sum(na.omit(x)^2)/n)
}
rmse <- apply(abs.error, 2, rmse.calculation)
#MAD FORMULA
mad.calculation <- function(x){
median(na.omit(x))
}
mad <- apply(abs.error, 2, mad.calculation)
#RMSLE FORMULA
rmsle.calculation <- function(x){
temp <- cbind(outcomes, x)
temp <- na.omit(temp)
sqrt((sum((log(temp[,2] + 1) - log(temp[,1] + 1))^2))/n)
}
rmsle <- apply(predictions, 2, rmsle.calculation)
#MAPE FORMULA
mape.calculation <- function(x){
sum(na.omit(x))/n
}
mape <- apply(abs.percent.error, 2, mape.calculation)
#MEAPE FORMULA
meape.calculation <- function(x){
median(na.omit(x))
}
meape <- apply(abs.percent.error, 2, meape.calculation)
#MRAE FORMULA
if(is.null(naive.forecast)==FALSE){ #tests to make sure that naive.forecast was specified in the arguments
mrae.calculation <- function(x){
temp <- cbind(b, x)
temp <- na.omit(temp)
median(temp[,2]/temp[,1])
}
mrae <- apply(abs.error, 2, mrae.calculation)
}
#Creating the output
output <- matrix(paste(rep("Model", k), 1:k))
if(RMSE==TRUE){
output <- cbind(output, rmse)
}
if(MAD==TRUE){
output <- cbind(output, mad)
}
if(RMSLE==TRUE){
output <- cbind(output, rmsle)
}
if(MAPE==TRUE){
output <- cbind(output, mape)
}
if(MEAPE==TRUE){
output <- cbind(output, meape)
}
if(MRAE==TRUE & is.null(naive.forecast)==FALSE){
output <- cbind(output, mrae)
}
return(output)
}
model.statistics2(outcomes=testing$voteshare, predictions=cbind(prediction1, prediction2, prediction3), naive.forecast=naive)
output.2 <- matrix(NA, dimnames=list(c(paste(rep("Model", k), 1:k)), c(, "RMSE", "MAD", "RMSLE", "MAPE", "MEAPE", "MRAE")))
k <- 3
output.2 <- matrix(NA, dimnames=list(c(paste(rep("Model", k), 1:k)), c(, "RMSE", "MAD", "RMSLE", "MAPE", "MEAPE", "MRAE")))
output.2 <- matrix(NA, dimnames=list(c(paste(rep("Model", k), 1:k)), c("", "RMSE", "MAD", "RMSLE", "MAPE", "MEAPE", "MRAE")))
output.2 <- matrix(NA)
row.names(output.2) <- c("Model1", "Model2", "Model3")
nrow(output2)
nrow(output.2)
output.2 <- matrix(NA, nrow=k)
row.names(output.2) <- paste(rep("Model",6), 1:6)
output.2 <- matrix(NA, nrow=k)
nrow(output.2)
row.names(output.2) <- paste(rep("Model",3), 1:3)
output.2
output.2 <- cbind(output.2, 1:3)
output.2
model.statistics2 <- function(outcomes, predictions, naive.forecast=NULL, RMSE=TRUE, MAD=TRUE,
RMSLE=TRUE, MAPE=TRUE, MEAPE=TRUE, MRAE=TRUE){
n <- nrow(predictions)
k <- ncol(predictions)
#calculate absolute error, e (i.e. the residuals)
function1 <- function(x){ #create a function to calculate RMSE for a single vector
abs(outcomes.test - x)
}
abs.error <- apply(predictions, 2, function1) #apply the function to predictions matrix by column
#abs.error is an n-by-k matrix containing absolute error; each column corresponds to a different model
#calculate absolute percentage error, a
function2 <- function(i){
(abs.error[,i]/abs(outcomes))*100
}
abs.percent.error <- sapply(1:k, function2)
#abs.percent.error is an n-by-k matrix containing absolute percentage error; each column corresponds to a different model
#calculate vector b, the difference between naive estimates and outcome
if(is.null(naive.forecast)==FALSE){ #tests to make sure that naive.forecast was specified in the
#arguments; otherwise the next line of code wouldn't run
b <- abs(outcomes - naive.forecast)
}
#RMSE FORMULA
rmse.calculation <- function(x){
sqrt(sum(na.omit(x)^2)/n)
}
rmse <- apply(abs.error, 2, rmse.calculation)
#MAD FORMULA
mad.calculation <- function(x){
median(na.omit(x))
}
mad <- apply(abs.error, 2, mad.calculation)
#RMSLE FORMULA
rmsle.calculation <- function(x){
temp <- cbind(outcomes, x)
temp <- na.omit(temp)
sqrt((sum((log(temp[,2] + 1) - log(temp[,1] + 1))^2))/n)
}
rmsle <- apply(predictions, 2, rmsle.calculation)
#MAPE FORMULA
mape.calculation <- function(x){
sum(na.omit(x))/n
}
mape <- apply(abs.percent.error, 2, mape.calculation)
#MEAPE FORMULA
meape.calculation <- function(x){
median(na.omit(x))
}
meape <- apply(abs.percent.error, 2, meape.calculation)
#MRAE FORMULA
if(is.null(naive.forecast)==FALSE){ #tests to make sure that naive.forecast was specified in the arguments
mrae.calculation <- function(x){
temp <- cbind(b, x)
temp <- na.omit(temp)
median(temp[,2]/temp[,1])
}
mrae <- apply(abs.error, 2, mrae.calculation)
}
#Creating the output
output <- matrix(NA, nrow=k)
row.names(output) <- paste(rep("Model",k), 1:k)
if(RMSE==TRUE){
output <- cbind(output, rmse)
}
if(MAD==TRUE){
output <- cbind(output, mad)
}
if(RMSLE==TRUE){
output <- cbind(output, rmsle)
}
if(MAPE==TRUE){
output <- cbind(output, mape)
}
if(MEAPE==TRUE){
output <- cbind(output, meape)
}
if(MRAE==TRUE & is.null(naive.forecast)==FALSE){
output <- cbind(output, mrae)
}
if(ncol(output)>1){ #checks to make sure that output was updated at least once (i.e. at least one of the
# six statistics was calculated and added to the output matrix). If so, it drops the
#first column, which was just a bunch of NAs. It then returns the output.
output <- output[,-1]
return(output)
} else(warning("No statistics were calculated. Set one of the statistics arguments to TRUE."))
}
model.statistics2(outcomes=testing$voteshare, predictions=cbind(prediction1, prediction2, prediction3), naive.forecast=naive)
predict.matrix <- cbind(prediction1, prediction2, prediction3)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive, rmse=FALSE)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive, RMSE=FALSE)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive, RMSE=FALSE, MAD=FALSE)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive, RMSE=FALSE, MAD=FALSE, RMSLE=FALSE)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive, RMSE=FALSE, MAD=FALSE, RMSLE=FALSE, MAPE=FALSE)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive, RMSE=FALSE, MAD=FALSE, RMSLE=FALSE, MAPE=FALSE, MEAPE=FALSE)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive, RMSE=FALSE, MAD=FALSE, RMSLE=FALSE, MAPE=FALSE, MEAPE=FALSE, MRAE=FALSE)
model.statistics2(outcomes=testing$voteshare, predictions=predict.matrix, naive.forecast=naive,
MRAE=FALSE)
library(foreign)
FRData <- read.dta("C:/Users/Thomas/Desktop/Gravity Trade IV Data/Frankel and Rose/ddat3.dta")
FRDataPanel <- read.dta("C:/Users/Thomas/Desktop/Gravity Trade IV Data/Frankel and Rose/data12.dta")
FRData.sub <- FRData[FRData$year==90,]
log.distance <- FRData.sub$ldist
log.population <- FRData.sub$lpop
common.language <- FRData.sub$comlang
common.border <- FRData.sub$border
log.areaProduct <- log(FRData.sub$areap*FRData.sub$areas)
landlocked <- FRData.sub$island
trade.gdp.ratio <- FRData.sub$lvalue/FRData.sub$lrgdp
model1 <- lm(trade.gdp.ratio ~ log.distance + log.population + common.language + common.border + log.areaProduct + landlocked)
summary(model1)
View(FRData)
View(FRData.sub)
area.p <- FRData.sub$areap
area.s <- FRData.sub$areas
model2 <- lm(trade.gdp.ratio ~ log.distance + log.population + common.language + common.border + log.areaProduct + landlocked + area.p + area.s)
summary(model2)
area.p <- log(FRData.sub$areap)
area.s <- log(FRData.sub$areas)
model2 <- lm(trade.gdp.ratio ~ log.distance + log.population + common.language + common.border + log.areaProduct + landlocked + area.p + area.s)
summary(model2)
area.p <- FRData.sub$areap
area.s <- FRData.sub$areas
model2 <- lm(trade.gdp.ratio ~ log.distance + log.population + common.language + common.border + log.areaProduct + landlocked + area.p + area.s)
summary(model2)
install.packages("foreach")
install.packages("doSNOW")
library(foreach)
pbinom(60, 100, prob=0.5, lower.tail=FALSE)
1 - pbinom(60, 100, prob=0.5, lower.tail=FALSE)
1 - pbinom(60, 100, prob=0.5)
pbinom(40, 100, prob=0.5)
1 - pbinom(60, 100, prob=0.5)
pbinom(39, 100, prob=0.5)
pbinom(39, 100, prob=0.5)
1 - pbinom(60, 100, prob=0.5)
pbinom(39, 100, prob=0.5)*2
x <- seq(1:100)
qbinom(p=0.025, size=x, prob=0.5)
temp <- 0.4*x
temp2 <- qbinom(p=0.025, size=x, prob=0.5)
temp
which(temp <= temp2)
0.4*90
0.6*90
pbinom(35, 90, 0.5)
pbinom(35, 90, 0.5)*2
install.packages("devtools")
install.packages("roxygen2")
install.packages("installr")
library(installr)
updateR()
install.packages("roxygen2")
setwd("C:/Users/Thomas/Documents/GitHub/Midterm")
